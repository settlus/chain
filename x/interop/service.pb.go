// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interop/service.proto

package interop

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OwnerOfRequest is the request for the OwnerOf RPC.
type OwnerOfRequest struct {
	ChainId      string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddr string `protobuf:"bytes,2,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	TokenIdHex   string `protobuf:"bytes,3,opt,name=token_id_hex,json=tokenIdHex,proto3" json:"token_id_hex,omitempty"`
	BlockHash    string `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *OwnerOfRequest) Reset()         { *m = OwnerOfRequest{} }
func (m *OwnerOfRequest) String() string { return proto.CompactTextString(m) }
func (*OwnerOfRequest) ProtoMessage()    {}
func (*OwnerOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc5d9756a9e9bdfb, []int{0}
}
func (m *OwnerOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnerOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnerOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnerOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnerOfRequest.Merge(m, src)
}
func (m *OwnerOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *OwnerOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnerOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OwnerOfRequest proto.InternalMessageInfo

func (m *OwnerOfRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *OwnerOfRequest) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *OwnerOfRequest) GetTokenIdHex() string {
	if m != nil {
		return m.TokenIdHex
	}
	return ""
}

func (m *OwnerOfRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

// OwnerOfResponse is the response for the OwnerOf RPC.
type OwnerOfResponse struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *OwnerOfResponse) Reset()         { *m = OwnerOfResponse{} }
func (m *OwnerOfResponse) String() string { return proto.CompactTextString(m) }
func (*OwnerOfResponse) ProtoMessage()    {}
func (*OwnerOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc5d9756a9e9bdfb, []int{1}
}
func (m *OwnerOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnerOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnerOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnerOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnerOfResponse.Merge(m, src)
}
func (m *OwnerOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *OwnerOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnerOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OwnerOfResponse proto.InternalMessageInfo

func (m *OwnerOfResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*OwnerOfRequest)(nil), "interop.OwnerOfRequest")
	proto.RegisterType((*OwnerOfResponse)(nil), "interop.OwnerOfResponse")
}

func init() { proto.RegisterFile("interop/service.proto", fileDescriptor_cc5d9756a9e9bdfb) }

var fileDescriptor_cc5d9756a9e9bdfb = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4b, 0xfc, 0x40,
	0x10, 0xc5, 0xb3, 0xff, 0xbf, 0x1a, 0x6f, 0x38, 0x15, 0x16, 0xc5, 0x28, 0xb8, 0x1c, 0xb1, 0xd0,
	0x2a, 0x01, 0x6d, 0x45, 0xd0, 0xea, 0x52, 0x1d, 0x5c, 0x69, 0x13, 0x92, 0xdd, 0xd1, 0x0d, 0x77,
	0x66, 0xe3, 0xee, 0x46, 0xf3, 0x31, 0xf4, 0x5b, 0x59, 0x5e, 0x69, 0x29, 0xc9, 0x17, 0x91, 0xdb,
	0x44, 0x41, 0x2c, 0xe7, 0xf7, 0x66, 0x86, 0xf7, 0x1e, 0x1c, 0x14, 0xa5, 0x45, 0xad, 0xaa, 0xd8,
	0xa0, 0x7e, 0x2e, 0x38, 0x46, 0x95, 0x56, 0x56, 0x51, 0x7f, 0xc0, 0xe1, 0x1b, 0x81, 0xdd, 0xd9,
	0x4b, 0x89, 0x7a, 0x76, 0x3f, 0xc7, 0xa7, 0x1a, 0x8d, 0xa5, 0x47, 0xb0, 0xcd, 0x65, 0x56, 0x94,
	0x69, 0x21, 0x02, 0x32, 0x21, 0xe7, 0xa3, 0xb9, 0xef, 0xe6, 0x44, 0xd0, 0x53, 0xd8, 0xe1, 0xaa,
	0xb4, 0x3a, 0xe3, 0x36, 0xcd, 0x84, 0xd0, 0xc1, 0x3f, 0xa7, 0x8f, 0xbf, 0xe1, 0x8d, 0x10, 0x9a,
	0x4e, 0x60, 0x6c, 0xd5, 0x02, 0xd7, 0xf7, 0xa9, 0xc4, 0x26, 0xf8, 0xef, 0x76, 0xc0, 0xb1, 0x44,
	0x4c, 0xb1, 0xa1, 0x27, 0x00, 0xf9, 0x52, 0xf1, 0x45, 0x2a, 0x33, 0x23, 0x83, 0x0d, 0xa7, 0x8f,
	0x1c, 0x99, 0x66, 0x46, 0x86, 0x67, 0xb0, 0xf7, 0x63, 0xc9, 0x54, 0xaa, 0x34, 0x48, 0xf7, 0x61,
	0x53, 0xad, 0xd1, 0x60, 0xa8, 0x1f, 0x2e, 0x12, 0xf0, 0x93, 0x3e, 0x07, 0xbd, 0x06, 0x7f, 0xb8,
	0xa1, 0x87, 0xd1, 0x10, 0x2e, 0xfa, 0x1d, 0xec, 0x38, 0xf8, 0x2b, 0xf4, 0xef, 0x43, 0xef, 0xf6,
	0xea, 0xbd, 0x65, 0x64, 0xd5, 0x32, 0xf2, 0xd9, 0x32, 0xf2, 0xda, 0x31, 0x6f, 0xd5, 0x31, 0xef,
	0xa3, 0x63, 0xde, 0x5d, 0xf8, 0x50, 0x58, 0x59, 0xe7, 0x11, 0x57, 0x8f, 0xb1, 0x41, 0x6b, 0x97,
	0xb5, 0x89, 0x5d, 0x1f, 0x71, 0x13, 0x0f, 0xff, 0xf2, 0x2d, 0xd7, 0xea, 0xe5, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xac, 0x25, 0x49, 0xaf, 0x6e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InteropClient is the client API for Interop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InteropClient interface {
	// OwnerOf returns the owner of a token on a foreign chain.
	OwnerOf(ctx context.Context, in *OwnerOfRequest, opts ...grpc.CallOption) (*OwnerOfResponse, error)
}

type interopClient struct {
	cc grpc1.ClientConn
}

func NewInteropClient(cc grpc1.ClientConn) InteropClient {
	return &interopClient{cc}
}

func (c *interopClient) OwnerOf(ctx context.Context, in *OwnerOfRequest, opts ...grpc.CallOption) (*OwnerOfResponse, error) {
	out := new(OwnerOfResponse)
	err := c.cc.Invoke(ctx, "/interop.Interop/OwnerOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteropServer is the server API for Interop service.
type InteropServer interface {
	// OwnerOf returns the owner of a token on a foreign chain.
	OwnerOf(context.Context, *OwnerOfRequest) (*OwnerOfResponse, error)
}

// UnimplementedInteropServer can be embedded to have forward compatible implementations.
type UnimplementedInteropServer struct {
}

func (*UnimplementedInteropServer) OwnerOf(ctx context.Context, req *OwnerOfRequest) (*OwnerOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnerOf not implemented")
}

func RegisterInteropServer(s grpc1.Server, srv InteropServer) {
	s.RegisterService(&_Interop_serviceDesc, srv)
}

func _Interop_OwnerOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteropServer).OwnerOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interop.Interop/OwnerOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteropServer).OwnerOf(ctx, req.(*OwnerOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interop.Interop",
	HandlerType: (*InteropServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OwnerOf",
			Handler:    _Interop_OwnerOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interop/service.proto",
}

func (m *OwnerOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnerOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnerOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintService(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenIdHex) > 0 {
		i -= len(m.TokenIdHex)
		copy(dAtA[i:], m.TokenIdHex)
		i = encodeVarintService(dAtA, i, uint64(len(m.TokenIdHex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintService(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnerOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnerOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnerOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintService(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OwnerOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.TokenIdHex)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *OwnerOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OwnerOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnerOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnerOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIdHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIdHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnerOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnerOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnerOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
