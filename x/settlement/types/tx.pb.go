// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settlus/settlement/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRecordRevenue is the RecordRevenue request type.
type MsgRecord struct {
	Sender          string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TenantId        uint64     `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	RequestId       string     `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Amount          types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	ChainId         string     `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string     `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenIdHex      string     `protobuf:"bytes,7,opt,name=token_id_hex,json=tokenIdHex,proto3" json:"token_id_hex,omitempty"`
	Metadata        string     `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgRecord) Reset()         { *m = MsgRecord{} }
func (m *MsgRecord) String() string { return proto.CompactTextString(m) }
func (*MsgRecord) ProtoMessage()    {}
func (*MsgRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{0}
}
func (m *MsgRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecord.Merge(m, src)
}
func (m *MsgRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecord proto.InternalMessageInfo

func (m *MsgRecord) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRecord) GetTenantId() uint64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *MsgRecord) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *MsgRecord) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgRecord) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgRecord) GetTokenIdHex() string {
	if m != nil {
		return m.TokenIdHex
	}
	return ""
}

func (m *MsgRecord) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// MsgRecordResponse defines the response structure for executing a MsgRecord
// message.
type MsgRecordResponse struct {
	UtxrId    uint64 `protobuf:"varint,1,opt,name=utxr_id,json=utxrId,proto3" json:"utxr_id,omitempty"`
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *MsgRecordResponse) Reset()         { *m = MsgRecordResponse{} }
func (m *MsgRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecordResponse) ProtoMessage()    {}
func (*MsgRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{1}
}
func (m *MsgRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordResponse.Merge(m, src)
}
func (m *MsgRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordResponse proto.InternalMessageInfo

func (m *MsgRecordResponse) GetUtxrId() uint64 {
	if m != nil {
		return m.UtxrId
	}
	return 0
}

func (m *MsgRecordResponse) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// MsgCancel is the Cancel request type.
type MsgCancel struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TenantId  uint64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *MsgCancel) Reset()         { *m = MsgCancel{} }
func (m *MsgCancel) String() string { return proto.CompactTextString(m) }
func (*MsgCancel) ProtoMessage()    {}
func (*MsgCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{2}
}
func (m *MsgCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancel.Merge(m, src)
}
func (m *MsgCancel) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancel proto.InternalMessageInfo

func (m *MsgCancel) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancel) GetTenantId() uint64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *MsgCancel) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// MsgCancelResponse defines the response structure for executing a MsgCancel
// message.
type MsgCancelResponse struct {
}

func (m *MsgCancelResponse) Reset()         { *m = MsgCancelResponse{} }
func (m *MsgCancelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelResponse) ProtoMessage()    {}
func (*MsgCancelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{3}
}
func (m *MsgCancelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelResponse.Merge(m, src)
}
func (m *MsgCancelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelResponse proto.InternalMessageInfo

// MsgCreateTenant is the CreateTenant request type.
type MsgCreateTenant struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	PayoutPeriod uint64 `protobuf:"varint,3,opt,name=payout_period,json=payoutPeriod,proto3" json:"payout_period,omitempty"`
}

func (m *MsgCreateTenant) Reset()         { *m = MsgCreateTenant{} }
func (m *MsgCreateTenant) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTenant) ProtoMessage()    {}
func (*MsgCreateTenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{4}
}
func (m *MsgCreateTenant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTenant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTenant.Merge(m, src)
}
func (m *MsgCreateTenant) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTenant) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTenant.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTenant proto.InternalMessageInfo

func (m *MsgCreateTenant) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateTenant) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCreateTenant) GetPayoutPeriod() uint64 {
	if m != nil {
		return m.PayoutPeriod
	}
	return 0
}

// MsgCreateTenantResponse defines the response structure for executing a
// MsgCreateTenant message.
type MsgCreateTenantResponse struct {
	TenantId uint64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (m *MsgCreateTenantResponse) Reset()         { *m = MsgCreateTenantResponse{} }
func (m *MsgCreateTenantResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTenantResponse) ProtoMessage()    {}
func (*MsgCreateTenantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{5}
}
func (m *MsgCreateTenantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTenantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTenantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTenantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTenantResponse.Merge(m, src)
}
func (m *MsgCreateTenantResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTenantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTenantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTenantResponse proto.InternalMessageInfo

func (m *MsgCreateTenantResponse) GetTenantId() uint64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

// MsgCreateTenantWithMintableContract is the CreateTenantWithMintableContract
// request type.
type MsgCreateTenantWithMintableContract struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	PayoutPeriod uint64 `protobuf:"varint,3,opt,name=payout_period,json=payoutPeriod,proto3" json:"payout_period,omitempty"`
	// Types that are valid to be assigned to XContractAddress:
	//	*MsgCreateTenantWithMintableContract_ContractAddress
	XContractAddress isMsgCreateTenantWithMintableContract_XContractAddress `protobuf_oneof:"_contract_address"`
}

func (m *MsgCreateTenantWithMintableContract) Reset()         { *m = MsgCreateTenantWithMintableContract{} }
func (m *MsgCreateTenantWithMintableContract) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTenantWithMintableContract) ProtoMessage()    {}
func (*MsgCreateTenantWithMintableContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{6}
}
func (m *MsgCreateTenantWithMintableContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTenantWithMintableContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTenantWithMintableContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTenantWithMintableContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTenantWithMintableContract.Merge(m, src)
}
func (m *MsgCreateTenantWithMintableContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTenantWithMintableContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTenantWithMintableContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTenantWithMintableContract proto.InternalMessageInfo

type isMsgCreateTenantWithMintableContract_XContractAddress interface {
	isMsgCreateTenantWithMintableContract_XContractAddress()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgCreateTenantWithMintableContract_ContractAddress struct {
	ContractAddress string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3,oneof" json:"contract_address,omitempty"`
}

func (*MsgCreateTenantWithMintableContract_ContractAddress) isMsgCreateTenantWithMintableContract_XContractAddress() {
}

func (m *MsgCreateTenantWithMintableContract) GetXContractAddress() isMsgCreateTenantWithMintableContract_XContractAddress {
	if m != nil {
		return m.XContractAddress
	}
	return nil
}

func (m *MsgCreateTenantWithMintableContract) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateTenantWithMintableContract) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCreateTenantWithMintableContract) GetPayoutPeriod() uint64 {
	if m != nil {
		return m.PayoutPeriod
	}
	return 0
}

func (m *MsgCreateTenantWithMintableContract) GetContractAddress() string {
	if x, ok := m.GetXContractAddress().(*MsgCreateTenantWithMintableContract_ContractAddress); ok {
		return x.ContractAddress
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgCreateTenantWithMintableContract) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgCreateTenantWithMintableContract_ContractAddress)(nil),
	}
}

// MsgAddTenantAdmin is the AddTenantAdmin request type.
type MsgAddTenantAdmin struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TenantId uint64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	NewAdmin string `protobuf:"bytes,3,opt,name=new_admin,json=newAdmin,proto3" json:"new_admin,omitempty"`
}

func (m *MsgAddTenantAdmin) Reset()         { *m = MsgAddTenantAdmin{} }
func (m *MsgAddTenantAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgAddTenantAdmin) ProtoMessage()    {}
func (*MsgAddTenantAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{7}
}
func (m *MsgAddTenantAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTenantAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTenantAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTenantAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTenantAdmin.Merge(m, src)
}
func (m *MsgAddTenantAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTenantAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTenantAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTenantAdmin proto.InternalMessageInfo

func (m *MsgAddTenantAdmin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddTenantAdmin) GetTenantId() uint64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *MsgAddTenantAdmin) GetNewAdmin() string {
	if m != nil {
		return m.NewAdmin
	}
	return ""
}

// MsgAddTenantAdminResponse defines the response structure for executing a
// MsgAddTenantAdmin message.
type MsgAddTenantAdminResponse struct {
}

func (m *MsgAddTenantAdminResponse) Reset()         { *m = MsgAddTenantAdminResponse{} }
func (m *MsgAddTenantAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddTenantAdminResponse) ProtoMessage()    {}
func (*MsgAddTenantAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{8}
}
func (m *MsgAddTenantAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTenantAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTenantAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTenantAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTenantAdminResponse.Merge(m, src)
}
func (m *MsgAddTenantAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTenantAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTenantAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTenantAdminResponse proto.InternalMessageInfo

// MsgRemoveTenantAdmin is the RemoveTenantAdmin request type.
type MsgRemoveTenantAdmin struct {
	Sender        string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TenantId      uint64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	AdminToRemove string `protobuf:"bytes,3,opt,name=admin_to_remove,json=adminToRemove,proto3" json:"admin_to_remove,omitempty"`
}

func (m *MsgRemoveTenantAdmin) Reset()         { *m = MsgRemoveTenantAdmin{} }
func (m *MsgRemoveTenantAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTenantAdmin) ProtoMessage()    {}
func (*MsgRemoveTenantAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{9}
}
func (m *MsgRemoveTenantAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTenantAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTenantAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTenantAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTenantAdmin.Merge(m, src)
}
func (m *MsgRemoveTenantAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTenantAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTenantAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTenantAdmin proto.InternalMessageInfo

func (m *MsgRemoveTenantAdmin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRemoveTenantAdmin) GetTenantId() uint64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *MsgRemoveTenantAdmin) GetAdminToRemove() string {
	if m != nil {
		return m.AdminToRemove
	}
	return ""
}

// MsgRemoveTenantAdminResponse defines the response structure for executing a
// MsgRemoveTenantAdmin message.
type MsgRemoveTenantAdminResponse struct {
}

func (m *MsgRemoveTenantAdminResponse) Reset()         { *m = MsgRemoveTenantAdminResponse{} }
func (m *MsgRemoveTenantAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTenantAdminResponse) ProtoMessage()    {}
func (*MsgRemoveTenantAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{10}
}
func (m *MsgRemoveTenantAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTenantAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTenantAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTenantAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTenantAdminResponse.Merge(m, src)
}
func (m *MsgRemoveTenantAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTenantAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTenantAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTenantAdminResponse proto.InternalMessageInfo

// MsgUpdateTenantPayoutPeriod is the UpdateTenantPayoutPeriod request type.
type MsgUpdateTenantPayoutPeriod struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TenantId     uint64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PayoutPeriod uint64 `protobuf:"varint,3,opt,name=payout_period,json=payoutPeriod,proto3" json:"payout_period,omitempty"`
}

func (m *MsgUpdateTenantPayoutPeriod) Reset()         { *m = MsgUpdateTenantPayoutPeriod{} }
func (m *MsgUpdateTenantPayoutPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTenantPayoutPeriod) ProtoMessage()    {}
func (*MsgUpdateTenantPayoutPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{11}
}
func (m *MsgUpdateTenantPayoutPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTenantPayoutPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTenantPayoutPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTenantPayoutPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTenantPayoutPeriod.Merge(m, src)
}
func (m *MsgUpdateTenantPayoutPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTenantPayoutPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTenantPayoutPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTenantPayoutPeriod proto.InternalMessageInfo

func (m *MsgUpdateTenantPayoutPeriod) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateTenantPayoutPeriod) GetTenantId() uint64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *MsgUpdateTenantPayoutPeriod) GetPayoutPeriod() uint64 {
	if m != nil {
		return m.PayoutPeriod
	}
	return 0
}

// MsgUpdateTenantPayoutPeriodResponse defines the response structure for
// executing a MsgUpdateTenantPayoutPeriod message.
type MsgUpdateTenantPayoutPeriodResponse struct {
}

func (m *MsgUpdateTenantPayoutPeriodResponse) Reset()         { *m = MsgUpdateTenantPayoutPeriodResponse{} }
func (m *MsgUpdateTenantPayoutPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTenantPayoutPeriodResponse) ProtoMessage()    {}
func (*MsgUpdateTenantPayoutPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{12}
}
func (m *MsgUpdateTenantPayoutPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTenantPayoutPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTenantPayoutPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTenantPayoutPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTenantPayoutPeriodResponse.Merge(m, src)
}
func (m *MsgUpdateTenantPayoutPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTenantPayoutPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTenantPayoutPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTenantPayoutPeriodResponse proto.InternalMessageInfo

// MsgPayout is the Payout request type.
type MsgDepositToTreasury struct {
	Sender   string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TenantId uint64     `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Amount   types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDepositToTreasury) Reset()         { *m = MsgDepositToTreasury{} }
func (m *MsgDepositToTreasury) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToTreasury) ProtoMessage()    {}
func (*MsgDepositToTreasury) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{13}
}
func (m *MsgDepositToTreasury) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToTreasury) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToTreasury.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToTreasury) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToTreasury.Merge(m, src)
}
func (m *MsgDepositToTreasury) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToTreasury) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToTreasury.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToTreasury proto.InternalMessageInfo

func (m *MsgDepositToTreasury) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDepositToTreasury) GetTenantId() uint64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *MsgDepositToTreasury) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// MsgPayoutResponse defines the response structure for executing a MsgPayout
// message.
type MsgDepositToTreasuryResponse struct {
}

func (m *MsgDepositToTreasuryResponse) Reset()         { *m = MsgDepositToTreasuryResponse{} }
func (m *MsgDepositToTreasuryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToTreasuryResponse) ProtoMessage()    {}
func (*MsgDepositToTreasuryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2217e74226b1f19d, []int{14}
}
func (m *MsgDepositToTreasuryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToTreasuryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToTreasuryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToTreasuryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToTreasuryResponse.Merge(m, src)
}
func (m *MsgDepositToTreasuryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToTreasuryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToTreasuryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToTreasuryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRecord)(nil), "settlus.settlement.MsgRecord")
	proto.RegisterType((*MsgRecordResponse)(nil), "settlus.settlement.MsgRecordResponse")
	proto.RegisterType((*MsgCancel)(nil), "settlus.settlement.MsgCancel")
	proto.RegisterType((*MsgCancelResponse)(nil), "settlus.settlement.MsgCancelResponse")
	proto.RegisterType((*MsgCreateTenant)(nil), "settlus.settlement.MsgCreateTenant")
	proto.RegisterType((*MsgCreateTenantResponse)(nil), "settlus.settlement.MsgCreateTenantResponse")
	proto.RegisterType((*MsgCreateTenantWithMintableContract)(nil), "settlus.settlement.MsgCreateTenantWithMintableContract")
	proto.RegisterType((*MsgAddTenantAdmin)(nil), "settlus.settlement.MsgAddTenantAdmin")
	proto.RegisterType((*MsgAddTenantAdminResponse)(nil), "settlus.settlement.MsgAddTenantAdminResponse")
	proto.RegisterType((*MsgRemoveTenantAdmin)(nil), "settlus.settlement.MsgRemoveTenantAdmin")
	proto.RegisterType((*MsgRemoveTenantAdminResponse)(nil), "settlus.settlement.MsgRemoveTenantAdminResponse")
	proto.RegisterType((*MsgUpdateTenantPayoutPeriod)(nil), "settlus.settlement.MsgUpdateTenantPayoutPeriod")
	proto.RegisterType((*MsgUpdateTenantPayoutPeriodResponse)(nil), "settlus.settlement.MsgUpdateTenantPayoutPeriodResponse")
	proto.RegisterType((*MsgDepositToTreasury)(nil), "settlus.settlement.MsgDepositToTreasury")
	proto.RegisterType((*MsgDepositToTreasuryResponse)(nil), "settlus.settlement.MsgDepositToTreasuryResponse")
}

func init() { proto.RegisterFile("settlus/settlement/tx.proto", fileDescriptor_2217e74226b1f19d) }

var fileDescriptor_2217e74226b1f19d = []byte{
	// 837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x34, 0xe9, 0xc6, 0x7e, 0x4d, 0x09, 0x99, 0x46, 0xc4, 0xb1, 0xdb, 0xc5, 0x72, 0x54,
	0x14, 0xa8, 0xd8, 0x25, 0x45, 0x22, 0x12, 0xb7, 0x24, 0x20, 0xd5, 0x48, 0xa9, 0x2a, 0x2b, 0x08,
	0x89, 0xcb, 0x32, 0xde, 0x79, 0x38, 0x2b, 0xbc, 0x33, 0xdb, 0x9d, 0x71, 0xea, 0xdc, 0x10, 0xea,
	0xa1, 0x47, 0xf8, 0x24, 0xf0, 0x31, 0x2a, 0x4e, 0x3d, 0x72, 0x42, 0x28, 0x3e, 0xf0, 0x35, 0xd0,
	0xce, 0xae, 0xb7, 0x59, 0xdb, 0x0b, 0x76, 0x50, 0x4e, 0xbb, 0xf3, 0xfe, 0xfe, 0xde, 0x6f, 0xde,
	0xbc, 0x19, 0x68, 0x2a, 0xd4, 0x7a, 0x30, 0x54, 0xae, 0xf9, 0x62, 0x88, 0x42, 0xbb, 0x7a, 0xe4,
	0x44, 0xb1, 0xd4, 0x92, 0xd2, 0x4c, 0xe9, 0xbc, 0x55, 0x36, 0x6c, 0x5f, 0xaa, 0x50, 0x2a, 0xb7,
	0xc7, 0x14, 0xba, 0xe7, 0xfb, 0x3d, 0xd4, 0x6c, 0xdf, 0xf5, 0x65, 0x20, 0x52, 0x9f, 0xc6, 0x56,
	0x5f, 0xf6, 0xa5, 0xf9, 0x75, 0x93, 0xbf, 0x4c, 0xba, 0x9d, 0x79, 0x85, 0xaa, 0xef, 0x9e, 0xef,
	0x27, 0x9f, 0x54, 0xd1, 0xfe, 0xf5, 0x16, 0xd4, 0x4e, 0x54, 0xbf, 0x8b, 0xbe, 0x8c, 0x39, 0x7d,
	0x0f, 0x2c, 0x85, 0x82, 0x63, 0x5c, 0x27, 0x2d, 0xb2, 0x57, 0xeb, 0x66, 0x2b, 0xda, 0x84, 0x9a,
	0x46, 0xc1, 0x84, 0xf6, 0x02, 0x5e, 0xbf, 0xd5, 0x22, 0x7b, 0xab, 0xdd, 0x6a, 0x2a, 0xe8, 0x70,
	0xfa, 0x00, 0x20, 0xc6, 0xe7, 0x43, 0x54, 0x46, 0xbb, 0x62, 0x1c, 0x6b, 0x99, 0xa4, 0xc3, 0xe9,
	0x01, 0x58, 0x2c, 0x94, 0x43, 0xa1, 0xeb, 0xab, 0x2d, 0xb2, 0x77, 0xe7, 0xf1, 0x8e, 0x93, 0x62,
	0x71, 0x92, 0x0a, 0x9c, 0xac, 0x02, 0xe7, 0x58, 0x06, 0xe2, 0x68, 0xf5, 0xf5, 0x9f, 0xef, 0x57,
	0xba, 0x99, 0x39, 0xdd, 0x81, 0xaa, 0x7f, 0xc6, 0x02, 0x91, 0x44, 0xbd, 0x6d, 0xa2, 0xae, 0x99,
	0x75, 0x87, 0xd3, 0x0f, 0xe1, 0x5d, 0x5f, 0x0a, 0x1d, 0x33, 0x5f, 0x7b, 0x8c, 0xf3, 0x18, 0x95,
	0xaa, 0x5b, 0xc6, 0x64, 0x63, 0x22, 0x3f, 0x4c, 0xc5, 0xb4, 0x05, 0xeb, 0x5a, 0xfe, 0x80, 0x49,
	0x14, 0xef, 0x0c, 0x47, 0xf5, 0x35, 0x63, 0x06, 0x46, 0xd6, 0xe1, 0x4f, 0x70, 0x44, 0x5b, 0x50,
	0x0d, 0x51, 0x33, 0xce, 0x34, 0xab, 0x57, 0x13, 0xad, 0xc1, 0x41, 0xba, 0xb9, 0xf4, 0xf3, 0x3b,
	0x3f, 0xfd, 0xfd, 0xdb, 0x47, 0x19, 0x17, 0xed, 0xaf, 0x60, 0x33, 0x27, 0xac, 0x8b, 0x2a, 0x92,
	0x42, 0x21, 0xdd, 0x86, 0xb5, 0xa1, 0x1e, 0xc5, 0x09, 0x54, 0x62, 0xe8, 0xb1, 0x92, 0x65, 0x87,
	0xd3, 0xfb, 0x50, 0x8b, 0xd1, 0x0f, 0xa2, 0x00, 0x85, 0x36, 0xcc, 0x19, 0x6e, 0x32, 0x41, 0x7b,
	0x60, 0xc8, 0x3f, 0x66, 0xc2, 0xc7, 0xc1, 0x4d, 0x90, 0x5f, 0x44, 0x7e, 0xcf, 0x20, 0x4f, 0xb3,
	0x4d, 0x90, 0xb7, 0x9f, 0xc3, 0x46, 0x22, 0x8c, 0x91, 0x69, 0x3c, 0x35, 0x51, 0x4b, 0x81, 0x6c,
	0xc1, 0x6d, 0x8e, 0x42, 0x86, 0x59, 0x1d, 0xe9, 0x82, 0xee, 0xc2, 0xdd, 0x88, 0x5d, 0xc8, 0xa1,
	0xf6, 0x22, 0x8c, 0x03, 0x99, 0x82, 0x58, 0xed, 0xae, 0xa7, 0xc2, 0x67, 0x46, 0x56, 0xc4, 0xf1,
	0x19, 0x6c, 0x4f, 0xa5, 0xcc, 0x79, 0x2c, 0xd4, 0x4a, 0x8a, 0xb5, 0xb6, 0x7f, 0x27, 0xb0, 0x3b,
	0xe5, 0xf8, 0x4d, 0xa0, 0xcf, 0x4e, 0x02, 0xa1, 0x59, 0x6f, 0x80, 0xc7, 0xd9, 0xce, 0xdf, 0x00,
	0x7e, 0xea, 0xcc, 0x69, 0xb8, 0xa4, 0x9d, 0x6b, 0x4f, 0x2a, 0x33, 0x2d, 0xf7, 0x8a, 0x90, 0x42,
	0xbd, 0x47, 0xf7, 0x60, 0xd3, 0x9b, 0xf6, 0x6e, 0xc7, 0x66, 0x33, 0x0e, 0x39, 0x4f, 0x0b, 0x39,
	0xe4, 0x61, 0x20, 0xae, 0xd7, 0x02, 0x4d, 0xa8, 0x09, 0x7c, 0xe1, 0xb1, 0x24, 0x42, 0xd6, 0x01,
	0x55, 0x81, 0x2f, 0x4c, 0xc4, 0x22, 0xf1, 0x4d, 0xd8, 0x99, 0xc9, 0x99, 0x37, 0xc2, 0x8f, 0x04,
	0xb6, 0x4c, 0x63, 0x87, 0xf2, 0x1c, 0xff, 0x37, 0xa8, 0x0f, 0x60, 0xc3, 0x00, 0xf2, 0xb4, 0xf4,
	0x62, 0x13, 0x32, 0x83, 0x76, 0xd7, 0x88, 0x4f, 0x65, 0x9a, 0xa7, 0x88, 0xcf, 0x86, 0xfb, 0xf3,
	0x10, 0xe4, 0x10, 0x5f, 0x12, 0x68, 0x9e, 0xa8, 0xfe, 0xd7, 0x11, 0xcf, 0x1b, 0xe0, 0xd9, 0xd5,
	0x5d, 0xba, 0x16, 0xd2, 0xe5, 0xfb, 0xf7, 0xa1, 0x69, 0xc3, 0x32, 0x14, 0x39, 0xda, 0x5f, 0x52,
	0x42, 0xbf, 0xc0, 0x48, 0xaa, 0x40, 0x9f, 0xca, 0xd3, 0x18, 0x99, 0x1a, 0xc6, 0x17, 0xd7, 0x83,
	0xf9, 0x76, 0x8c, 0xae, 0x2c, 0x35, 0x46, 0xe7, 0x31, 0x3c, 0x03, 0x69, 0x82, 0xf9, 0xf1, 0xd8,
	0x82, 0x95, 0x13, 0xd5, 0xa7, 0x4f, 0xc1, 0xca, 0xae, 0x84, 0x07, 0xce, 0xec, 0x25, 0xe4, 0xe4,
	0x03, 0xb0, 0xf1, 0xf0, 0x5f, 0xd5, 0xf9, 0xb9, 0x7e, 0x0a, 0x56, 0x36, 0xe5, 0xca, 0xe2, 0xa5,
	0xea, 0xd2, 0x78, 0xc5, 0xa9, 0x45, 0xbf, 0x83, 0xf5, 0xc2, 0xc8, 0xda, 0x2d, 0x73, 0xbb, 0x62,
	0xd4, 0x78, 0xb4, 0x80, 0x51, 0x9e, 0xe1, 0x15, 0x81, 0xd6, 0x7f, 0x4e, 0x9a, 0x83, 0x05, 0x22,
	0xce, 0x73, 0x5c, 0x0e, 0xca, 0xf7, 0xf0, 0xce, 0xd4, 0x9c, 0x28, 0x63, 0xa9, 0x68, 0xd6, 0xf8,
	0x78, 0x21, 0xb3, 0x3c, 0x8f, 0x84, 0xcd, 0xd9, 0xd3, 0xbf, 0x57, 0xba, 0xc1, 0x53, 0x96, 0x8d,
	0x4f, 0x16, 0xb5, 0xcc, 0x13, 0xbe, 0x24, 0x50, 0x2f, 0x3d, 0xcc, 0x6e, 0x49, 0xb8, 0x32, 0x87,
	0xc6, 0xc1, 0x92, 0x0e, 0x57, 0xeb, 0x9e, 0x3d, 0xa4, 0x65, 0x75, 0xcf, 0x58, 0x96, 0xd6, 0x5d,
	0x7a, 0xca, 0x8e, 0xbe, 0x7c, 0x7d, 0x69, 0x93, 0x37, 0x97, 0x36, 0xf9, 0xeb, 0xd2, 0x26, 0x3f,
	0x8f, 0xed, 0xca, 0x9b, 0xb1, 0x5d, 0xf9, 0x63, 0x6c, 0x57, 0xbe, 0x7d, 0xd4, 0x0f, 0xf4, 0xd9,
	0xb0, 0xe7, 0xf8, 0x32, 0x74, 0x27, 0x2f, 0x43, 0xf3, 0xe8, 0x71, 0x47, 0x85, 0x17, 0xe2, 0x45,
	0x84, 0xaa, 0x67, 0x99, 0x27, 0xdc, 0xa7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x58, 0x32, 0xd9,
	0x24, 0x44, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Record(ctx context.Context, in *MsgRecord, opts ...grpc.CallOption) (*MsgRecordResponse, error)
	Cancel(ctx context.Context, in *MsgCancel, opts ...grpc.CallOption) (*MsgCancelResponse, error)
	CreateTenant(ctx context.Context, in *MsgCreateTenant, opts ...grpc.CallOption) (*MsgCreateTenantResponse, error)
	CreateTenantWithMintableContract(ctx context.Context, in *MsgCreateTenantWithMintableContract, opts ...grpc.CallOption) (*MsgCreateTenantResponse, error)
	AddTenantAdmin(ctx context.Context, in *MsgAddTenantAdmin, opts ...grpc.CallOption) (*MsgAddTenantAdminResponse, error)
	RemoveTenantAdmin(ctx context.Context, in *MsgRemoveTenantAdmin, opts ...grpc.CallOption) (*MsgRemoveTenantAdminResponse, error)
	UpdateTenantPayoutPeriod(ctx context.Context, in *MsgUpdateTenantPayoutPeriod, opts ...grpc.CallOption) (*MsgUpdateTenantPayoutPeriodResponse, error)
	DepositToTreasury(ctx context.Context, in *MsgDepositToTreasury, opts ...grpc.CallOption) (*MsgDepositToTreasuryResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Record(ctx context.Context, in *MsgRecord, opts ...grpc.CallOption) (*MsgRecordResponse, error) {
	out := new(MsgRecordResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Cancel(ctx context.Context, in *MsgCancel, opts ...grpc.CallOption) (*MsgCancelResponse, error) {
	out := new(MsgCancelResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTenant(ctx context.Context, in *MsgCreateTenant, opts ...grpc.CallOption) (*MsgCreateTenantResponse, error) {
	out := new(MsgCreateTenantResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/CreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTenantWithMintableContract(ctx context.Context, in *MsgCreateTenantWithMintableContract, opts ...grpc.CallOption) (*MsgCreateTenantResponse, error) {
	out := new(MsgCreateTenantResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/CreateTenantWithMintableContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddTenantAdmin(ctx context.Context, in *MsgAddTenantAdmin, opts ...grpc.CallOption) (*MsgAddTenantAdminResponse, error) {
	out := new(MsgAddTenantAdminResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/AddTenantAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveTenantAdmin(ctx context.Context, in *MsgRemoveTenantAdmin, opts ...grpc.CallOption) (*MsgRemoveTenantAdminResponse, error) {
	out := new(MsgRemoveTenantAdminResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/RemoveTenantAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTenantPayoutPeriod(ctx context.Context, in *MsgUpdateTenantPayoutPeriod, opts ...grpc.CallOption) (*MsgUpdateTenantPayoutPeriodResponse, error) {
	out := new(MsgUpdateTenantPayoutPeriodResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/UpdateTenantPayoutPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositToTreasury(ctx context.Context, in *MsgDepositToTreasury, opts ...grpc.CallOption) (*MsgDepositToTreasuryResponse, error) {
	out := new(MsgDepositToTreasuryResponse)
	err := c.cc.Invoke(ctx, "/settlus.settlement.Msg/DepositToTreasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Record(context.Context, *MsgRecord) (*MsgRecordResponse, error)
	Cancel(context.Context, *MsgCancel) (*MsgCancelResponse, error)
	CreateTenant(context.Context, *MsgCreateTenant) (*MsgCreateTenantResponse, error)
	CreateTenantWithMintableContract(context.Context, *MsgCreateTenantWithMintableContract) (*MsgCreateTenantResponse, error)
	AddTenantAdmin(context.Context, *MsgAddTenantAdmin) (*MsgAddTenantAdminResponse, error)
	RemoveTenantAdmin(context.Context, *MsgRemoveTenantAdmin) (*MsgRemoveTenantAdminResponse, error)
	UpdateTenantPayoutPeriod(context.Context, *MsgUpdateTenantPayoutPeriod) (*MsgUpdateTenantPayoutPeriodResponse, error)
	DepositToTreasury(context.Context, *MsgDepositToTreasury) (*MsgDepositToTreasuryResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Record(ctx context.Context, req *MsgRecord) (*MsgRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}
func (*UnimplementedMsgServer) Cancel(ctx context.Context, req *MsgCancel) (*MsgCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedMsgServer) CreateTenant(ctx context.Context, req *MsgCreateTenant) (*MsgCreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (*UnimplementedMsgServer) CreateTenantWithMintableContract(ctx context.Context, req *MsgCreateTenantWithMintableContract) (*MsgCreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenantWithMintableContract not implemented")
}
func (*UnimplementedMsgServer) AddTenantAdmin(ctx context.Context, req *MsgAddTenantAdmin) (*MsgAddTenantAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenantAdmin not implemented")
}
func (*UnimplementedMsgServer) RemoveTenantAdmin(ctx context.Context, req *MsgRemoveTenantAdmin) (*MsgRemoveTenantAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTenantAdmin not implemented")
}
func (*UnimplementedMsgServer) UpdateTenantPayoutPeriod(ctx context.Context, req *MsgUpdateTenantPayoutPeriod) (*MsgUpdateTenantPayoutPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantPayoutPeriod not implemented")
}
func (*UnimplementedMsgServer) DepositToTreasury(ctx context.Context, req *MsgDepositToTreasury) (*MsgDepositToTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToTreasury not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Record(ctx, req.(*MsgRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Cancel(ctx, req.(*MsgCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTenant(ctx, req.(*MsgCreateTenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTenantWithMintableContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTenantWithMintableContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTenantWithMintableContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/CreateTenantWithMintableContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTenantWithMintableContract(ctx, req.(*MsgCreateTenantWithMintableContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddTenantAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddTenantAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddTenantAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/AddTenantAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddTenantAdmin(ctx, req.(*MsgAddTenantAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveTenantAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveTenantAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveTenantAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/RemoveTenantAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveTenantAdmin(ctx, req.(*MsgRemoveTenantAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTenantPayoutPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTenantPayoutPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTenantPayoutPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/UpdateTenantPayoutPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTenantPayoutPeriod(ctx, req.(*MsgUpdateTenantPayoutPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositToTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToTreasury)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositToTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settlus.settlement.Msg/DepositToTreasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositToTreasury(ctx, req.(*MsgDepositToTreasury))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "settlus.settlement.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _Msg_Record_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Msg_Cancel_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _Msg_CreateTenant_Handler,
		},
		{
			MethodName: "CreateTenantWithMintableContract",
			Handler:    _Msg_CreateTenantWithMintableContract_Handler,
		},
		{
			MethodName: "AddTenantAdmin",
			Handler:    _Msg_AddTenantAdmin_Handler,
		},
		{
			MethodName: "RemoveTenantAdmin",
			Handler:    _Msg_RemoveTenantAdmin_Handler,
		},
		{
			MethodName: "UpdateTenantPayoutPeriod",
			Handler:    _Msg_UpdateTenantPayoutPeriod_Handler,
		},
		{
			MethodName: "DepositToTreasury",
			Handler:    _Msg_DepositToTreasury_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settlus/settlement/tx.proto",
}

func (m *MsgRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TokenIdHex) > 0 {
		i -= len(m.TokenIdHex)
		copy(dAtA[i:], m.TokenIdHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenIdHex)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TenantId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TenantId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.UtxrId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UtxrId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TenantId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TenantId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayoutPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PayoutPeriod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTenantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTenantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTenantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TenantId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TenantId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTenantWithMintableContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTenantWithMintableContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTenantWithMintableContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XContractAddress != nil {
		{
			size := m.XContractAddress.Size()
			i -= size
			if _, err := m.XContractAddress.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PayoutPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PayoutPeriod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTenantWithMintableContract_ContractAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTenantWithMintableContract_ContractAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ContractAddress)
	copy(dAtA[i:], m.ContractAddress)
	i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *MsgAddTenantAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTenantAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTenantAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewAdmin) > 0 {
		i -= len(m.NewAdmin)
		copy(dAtA[i:], m.NewAdmin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAdmin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TenantId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TenantId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddTenantAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTenantAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTenantAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTenantAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTenantAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTenantAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminToRemove) > 0 {
		i -= len(m.AdminToRemove)
		copy(dAtA[i:], m.AdminToRemove)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminToRemove)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TenantId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TenantId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTenantAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTenantAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTenantAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTenantPayoutPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTenantPayoutPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTenantPayoutPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayoutPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PayoutPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.TenantId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TenantId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTenantPayoutPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTenantPayoutPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTenantPayoutPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositToTreasury) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToTreasury) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToTreasury) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TenantId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TenantId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToTreasuryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToTreasuryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToTreasuryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TenantId != 0 {
		n += 1 + sovTx(uint64(m.TenantId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenIdHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtxrId != 0 {
		n += 1 + sovTx(uint64(m.UtxrId))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TenantId != 0 {
		n += 1 + sovTx(uint64(m.TenantId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PayoutPeriod != 0 {
		n += 1 + sovTx(uint64(m.PayoutPeriod))
	}
	return n
}

func (m *MsgCreateTenantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantId != 0 {
		n += 1 + sovTx(uint64(m.TenantId))
	}
	return n
}

func (m *MsgCreateTenantWithMintableContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PayoutPeriod != 0 {
		n += 1 + sovTx(uint64(m.PayoutPeriod))
	}
	if m.XContractAddress != nil {
		n += m.XContractAddress.Size()
	}
	return n
}

func (m *MsgCreateTenantWithMintableContract_ContractAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *MsgAddTenantAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TenantId != 0 {
		n += 1 + sovTx(uint64(m.TenantId))
	}
	l = len(m.NewAdmin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddTenantAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveTenantAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TenantId != 0 {
		n += 1 + sovTx(uint64(m.TenantId))
	}
	l = len(m.AdminToRemove)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveTenantAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTenantPayoutPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TenantId != 0 {
		n += 1 + sovTx(uint64(m.TenantId))
	}
	if m.PayoutPeriod != 0 {
		n += 1 + sovTx(uint64(m.PayoutPeriod))
	}
	return n
}

func (m *MsgUpdateTenantPayoutPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositToTreasury) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TenantId != 0 {
		n += 1 + sovTx(uint64(m.TenantId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositToTreasuryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIdHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIdHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtxrId", wireType)
			}
			m.UtxrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtxrId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutPeriod", wireType)
			}
			m.PayoutPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayoutPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTenantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTenantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTenantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTenantWithMintableContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTenantWithMintableContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTenantWithMintableContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutPeriod", wireType)
			}
			m.PayoutPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayoutPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XContractAddress = &MsgCreateTenantWithMintableContract_ContractAddress{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTenantAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTenantAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTenantAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTenantAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTenantAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTenantAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTenantAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTenantAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTenantAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminToRemove = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTenantAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTenantAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTenantAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTenantPayoutPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTenantPayoutPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTenantPayoutPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutPeriod", wireType)
			}
			m.PayoutPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayoutPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTenantPayoutPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTenantPayoutPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTenantPayoutPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToTreasury) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToTreasury: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToTreasury: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToTreasuryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToTreasuryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToTreasuryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
